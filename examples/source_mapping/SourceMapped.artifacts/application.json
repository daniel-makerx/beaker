{
    "hints": {
        "add(uint64,uint64)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "Ly8gR0VORVJBVEVEIFRFQUwgICAgLy8gICAgUEMgICAgUFlURUFMIFBBVEggICAgICAgIExJTkUgICAgUFlURUFMCiNwcmFnbWEgdmVyc2lvbiA4ICAgIC8vICAgICgwKSAgIHRlc3RzL2NvbmZ0ZXN0LnB5ICAzNiAgICAgIGFwcC5idWlsZChhbGdvZF9jbGllbnQpCnB1c2hpbnQgMCAvLyAwICAgICAgIC8vICAgICgxKQpyZXR1cm4gICAgICAgICAgICAgICAvLyAgICAoMyk="
    },
    "state": {
        "global": {
            "num_byte_slices": 0,
            "num_uints": 0
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {},
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "SourceMapped",
        "methods": [
            {
                "name": "add",
                "args": [
                    {
                        "type": "uint64",
                        "name": "a"
                    },
                    {
                        "type": "uint64",
                        "name": "b"
                    }
                ],
                "returns": {
                    "type": "uint64"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE"
    }
}